version: '3.8'

services:
  db:
    image: postgres:15
    container_name: dantizt_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: dantizt_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal_network
    restart: always

  api:
    build: ./dantizt-api
    container_name: dantizt_api
    volumes:
      - ./dantizt-api:/app
      - uploads:/app/uploads
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/dantizt_db
      - SECRET_KEY=your_secret_key_here
      - DOCKER=true
    networks:
      - internal_network
    depends_on:
      - db
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  front:
    build:
      context: ./dantizt-front
      args:
        - NEXT_PUBLIC_API_URL=http://api:8000
    container_name: dantizt_front
    volumes:
      - ./dantizt-front:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NEXT_PUBLIC_API_URL=http://api:8000
    networks:
      - internal_network
    depends_on:
      - api
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  nginx:
    build: ./nginx
    container_name: dantizt_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - uploads:/var/www/uploads
    networks:
      - internal_network
      - external_network
    depends_on:
      api:
        condition: service_healthy
      front:
        condition: service_healthy
    restart: always

volumes:
  postgres_data:
  uploads:

networks:
  internal_network:
    driver: bridge
    name: dantizt_internal_network
  external_network:
    driver: bridge
    name: dantizt_external_network
